services:
  config-server:
    build:
      context: ./services/config-server
    image: ecommerce/config-server
    container_name: ecommerce-config-server
    ports:
      - "8888:8888"
    environment:
      - SPRING_CLOUD_CONFIG_SERVER_GIT_URI=https://github.com/Filip-Alves/ecommerce-config.git
    depends_on:
      - consul
    restart: always

  api-gateway:
    build: { context: ./services/api-gateway }
    image: ecommerce/api-gateway
    container_name: ecommerce-gateway
    ports: ["8080:8080"]
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVICE_NAME=api-gateway
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
    depends_on:
      - consul
      - logstash
      - config-server
    restart: always

  product-catalog-service:
    build: { context: ./services/product-catalog-service }
    image: ecommerce/product-catalog-service
    container_name: ecommerce-product-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVICE_NAME=product-catalog-service
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/product_catalog_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - postgres
      - consul
      - logstash
      - config-server
    restart: always

  user-service:
    build:
      context: ./services/user-service
    image: ecommerce/user-service
    container_name: ecommerce-user-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVICE_NAME=user-service
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/user_service_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
    depends_on:
      - postgres
      - consul
      - config-server
      - logstash
    restart: always

  logstash:
    build: { context: ./logstash_build } # build custom
    image: ecommerce/logstash-custom
    container_name: ecommerce-logstash
    ports: ["5000:5000"]
    volumes: [./logstash/pipeline:/usr/share/logstash/pipeline:ro]
    depends_on:
      - elasticsearch
    restart: always

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
    container_name: ecommerce-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports: ["9200:9200"]
    volumes: [es-data:/usr/share/elasticsearch/data]
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'curl -s http://localhost:9200/_cluster/health | grep -vq ''"status":"red"''',
        ]
      interval: 10s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:8.7.0
    container_name: ecommerce-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200 # Dit à Kibana où trouver Elasticsearch
    depends_on:
      - elasticsearch

  postgres:
    image: postgres:15
    container_name: ecommerce-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432" # 5432 est utilisé par mon psql local :/
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d

  consul:
    image: hashicorp/consul:1.15
    container_name: ecommerce-consul
    ports:
      - "8500:8500"
    command: "agent -server -bootstrap-expect=1 -ui -client=0.0.0.0" # Lance Consul en mode dev

volumes:
  postgres-data:
    name: ecommerce-postgres-data
  es-data: # volume pour Elasticsearch
    driver: local
